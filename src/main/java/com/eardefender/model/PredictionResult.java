package com.eardefender.model;

import com.eardefender.validation.Timestamp;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;

@Schema(description = "Model representing the result of a prediction of a file")
@Builder
@Data
@AllArgsConstructor
@NoArgsConstructor
public class PredictionResult implements Cloneable {

    @Schema(description = "The URL link associated with the prediction result",
            example = "https://example.com/prediction")
    @NotBlank(message = "Link must not be blank")
    private String link;

    @Schema(description = "Timestamp of the prediction result in ISO 8601 format (YYYY-MM-DDThh:mm:ssTZD)",
            example = "2024-10-10T14:30:00Z")
    @NotBlank(message = "Timestamp must not be blank")
    @Timestamp(message = "Timestamp must follow ISO 8601 (YYYY-MM-DDThh:mm:ssTZD) format")
    private String timestamp;

    @Schema(description = "The name of the model used for predictions",
            example = "example-model")
    @NotBlank(message = "Model must not be blank")
    private String model;

    @Schema(description = "List of predictions generated by the model")
    @NotNull(message = "ModelPredictions must not be null")
    private List<SegmentPrediction> modelPredictions;

    @Override
    public PredictionResult clone() {
        try {
            PredictionResult clone = (PredictionResult) super.clone();
            if (modelPredictions != null) {
                clone.setModelPredictions(modelPredictions.stream().map(SegmentPrediction::clone).toList());
            }
            return clone;
        } catch (CloneNotSupportedException e) {
            throw new AssertionError();
        }
    }
}
